apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway-service
  namespace: chatbot
  labels:
    app: chatbot
    component: gateway
    version: v1.0.0
spec:
  replicas: 2
  selector:
    matchLabels:
      app: gateway-service
  template:
    metadata:
      labels:
        app: gateway-service
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      containers:
      - name: gateway
        image: chatbot/gateway:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        env:
        - name: SPRING_PROFILES_ACTIVE
          valueFrom:
            configMapKeyRef:
              name: chatbot-config
              key: SPRING_PROFILES_ACTIVE
        - name: NACOS_SERVER_ADDR
          valueFrom:
            configMapKeyRef:
              name: chatbot-config
              key: NACOS_SERVER
        - name: NACOS_NAMESPACE
          valueFrom:
            configMapKeyRef:
              name: chatbot-config
              key: NACOS_NAMESPACE
        - name: NACOS_GROUP
          valueFrom:
            configMapKeyRef:
              name: chatbot-config
              key: NACOS_GROUP
        - name: NACOS_USERNAME
          valueFrom:
            secretKeyRef:
              name: chatbot-secret
              key: NACOS_USERNAME
        - name: NACOS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: chatbot-secret
              key: NACOS_PASSWORD
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: chatbot-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: chatbot-config
              key: REDIS_PORT
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: chatbot-secret
              key: REDIS_PASSWORD
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: config-volume
        configMap:
          name: chatbot-config
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: gateway-service
  namespace: chatbot
  labels:
    app: chatbot
    component: gateway
spec:
  selector:
    app: gateway-service
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  type: LoadBalancer
  sessionAffinity: None 