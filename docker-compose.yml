version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15
    container_name: chatbot-postgres
    environment:
      POSTGRES_DB: chatbotspringcloud
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - chatbot-network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: chatbot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - chatbot-network

  # Nacos服务发现和配置中心
  nacos:
    image: nacos/nacos-server:v2.2.3
    container_name: chatbot-nacos
    environment:
      MODE: standalone
      SPRING_DATASOURCE_PLATFORM: mysql
      MYSQL_SERVICE_HOST: nacos-mysql
      MYSQL_SERVICE_DB_NAME: nacos
      MYSQL_SERVICE_PORT: 3306
      MYSQL_SERVICE_USER: nacos
      MYSQL_SERVICE_PASSWORD: nacos
    ports:
      - "8848:8848"
      - "9848:9848"
    depends_on:
      - nacos-mysql
    networks:
      - chatbot-network

  # Nacos MySQL
  nacos-mysql:
    image: mysql:8.0
    container_name: chatbot-nacos-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: nacos
      MYSQL_USER: nacos
      MYSQL_PASSWORD: nacos
    ports:
      - "3306:3306"
    volumes:
      - nacos_mysql_data:/var/lib/mysql
      - ./nacos-mysql.sql:/docker-entrypoint-initdb.d/nacos-mysql.sql
    networks:
      - chatbot-network

  # RocketMQ NameServer
  rocketmq-namesrv:
    image: apache/rocketmq:4.9.7
    container_name: chatbot-rocketmq-namesrv
    command: sh mqnamesrv
    ports:
      - "9876:9876"
    networks:
      - chatbot-network

  # RocketMQ Broker
  rocketmq-broker:
    image: apache/rocketmq:4.9.7
    container_name: chatbot-rocketmq-broker
    command: sh mqbroker -n rocketmq-namesrv:9876
    ports:
      - "10909:10909"
      - "10911:10911"
    depends_on:
      - rocketmq-namesrv
    networks:
      - chatbot-network

  # RocketMQ Console
  rocketmq-console:
    image: apacherocketmq/rocketmq-dashboard:1.0.0
    container_name: chatbot-rocketmq-console
    ports:
      - "8080:8080"
    environment:
      JAVA_OPTS: -Drocketmq.namesrv.addr=rocketmq-namesrv:9876
    depends_on:
      - rocketmq-namesrv
    networks:
      - chatbot-network

  # Seata Server
  seata-server:
    image: seataio/seata-server:1.7.0
    container_name: chatbot-seata-server
    environment:
      SEATA_PORT: 8091
      SEATA_IP: seata-server
      SEATA_REGISTRY_TYPE: nacos
      SEATA_REGISTRY_NACOS_SERVER_ADDR: nacos:8848
      SEATA_REGISTRY_NACOS_NAMESPACE: chatbot
      SEATA_REGISTRY_NACOS_GROUP: SEATA_GROUP
      SEATA_CONFIG_TYPE: nacos
      SEATA_CONFIG_NACOS_SERVER_ADDR: nacos:8848
      SEATA_CONFIG_NACOS_NAMESPACE: chatbot
      SEATA_CONFIG_NACOS_GROUP: SEATA_GROUP
    ports:
      - "8091:8091"
    depends_on:
      - nacos
    networks:
      - chatbot-network

  # Milvus向量数据库
  milvus:
    image: milvusdb/milvus:v2.3.2
    container_name: chatbot-milvus
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - etcd
      - minio
    networks:
      - chatbot-network

  # Etcd
  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: chatbot-etcd
    environment:
      ETCD_AUTO_COMPACTION_MODE: revision
      ETCD_AUTO_COMPACTION_RETENTION: "1000"
      ETCD_QUOTA_BACKEND_BYTES: "4294967296"
      ETCD_SNAPSHOT_COUNT: "50000"
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /var/lib/etcd
    networks:
      - chatbot-network

  # MinIO
  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: chatbot-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: minio server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - chatbot-network

volumes:
  postgres_data:
  redis_data:
  nacos_mysql_data:
  minio_data:

networks:
  chatbot-network:
    driver: bridge 